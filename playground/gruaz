#!/bin/bash

set -e -u -o pipefail
rules="oe 1990 erofa m-mbp/n-mbp â/a sch/ch oo/o mn/n con/gon ck/c ck/qu emm/am enn/an ao/a chs/ch cq/q êi/ei ey/et oe/oi î/i ouin/oin w/v xs/x xt/x"
link="https://orthographe-rationnelle.info/regles/perso?regles=$rules"
function dict_gen {
    $(jj workspace root)/_build/default/dict-gen/bin/dict_gen.exe "$@"
}
function ortografe_cli {
    $(jj workspace root)/_build/default/doc-conversion/bin/ortografe_cli.exe "$@"
}
rules_flags=()
function compute_flags {
    if [ "${#rules_flags[@]}" -eq 0 ]; then
        flags=$(dict_gen gen --help plain | grep -o -e '--[^ ]*')
        builtin=()
        custom=()
        for rule in $rules; do
            if grep -qxFe "--$rule" 2> /dev/null <<< "$flags"
            then
                builtin+=("--$rule")
            else
                custom+=("$rule")
            fi
        done
        rules_flags=("${builtin[@]}" --custom "${custom[*]}")
    fi
}

case "${1-}" in
site)
    xdg-open "$link";;
lexique)
    {
        sqlite3 <<EOF
.mode tabs
.import _build/default/data/lexique/Lexique383-full.gen.tsv t
.mode csv
select ortho from t
where (ortho = lemme or ortho = 'arrhes')
order by cast (freqlemfilms2 as real) desc
EOF
    } | tr -d '"'
    ;;
pdf)
    # Inclusion des féminins, pas des pluriels?
    # sc pas inclus, mais règle à clarifier
    cd $(jj workspace root)
    compute_flags
    {
        sqlite3 <<EOF
.mode tabs
.import _build/default/data/lexique/Lexique383-full.gen.tsv t
.mode csv
select ortho from t
where (ortho = lemme or (genre = 'f' and nombre <> 'p') or ortho = 'arrhes')
order by cast (freqlemfilms2 as real) desc
EOF
    } | tr -d '"' > /tmp/lexique
    ortografe_cli conv --type .txt /tmp/lexique -o /tmp/lexique-oe --oe
    ortografe_cli conv --type .txt /tmp/lexique -o /tmp/lexique-1990-oe --oe --1990
    ortografe_cli conv --type .txt /tmp/lexique -o /tmp/lexique-fascicule "${rules_flags[@]}"
    rules_flags_no_1990=()
    for v in "${rules_flags[@]}"; do
        if [ "$v" != --1990 ]; then
            rules_flags_no_1990+=("$v")
        fi
    done
    ortografe_cli conv --type .txt /tmp/lexique -o /tmp/lexique-fascicule-no-1990 "${rules_flags_no_1990[@]}"
    # strange things happening with black-out, not quite clear why it's ultimately
    # included
    export rules
    export link
    python -c '
import sys, os
lexique_oe = open("/tmp/lexique-oe").read().splitlines()
lexique_1990_oe = open("/tmp/lexique-1990-oe").read().splitlines()
lexique_fascicule = open("/tmp/lexique-fascicule").read().splitlines()
lexique_fascicule_no_1990 = open("/tmp/lexique-fascicule-no-1990").read().splitlines()
table = {}
for i in range(len(lexique_oe)):
    r = table.setdefault(lexique_1990_oe[i], { "old": [], "new": lexique_fascicule[i], "touched": False })
    r["old"].append(lexique_oe[i])
    r["touched"] = r["touched"] or (lexique_fascicule_no_1990[i] != lexique_oe[i])
import locale
locale.setlocale(locale.LC_ALL, "fr_FR.UTF-8")
for k in table:
    table[k]["old"] = list(set(table[k]["old"]))
    table[k]["old"].sort(key=locale.strxfrm)
    try:
        table[k]["old"].remove(k)
    except ValueError:
        pass
def print_json(f):
    import json
    table_ordered = (
      { k: table[k] for (i, k) in enumerate(sorted(table.keys(), key=locale.strxfrm))
                    if -i < 1000 })
    print(json.dumps(
            { "rules": list(sorted(os.environ["rules"].split(" "), key=lambda x: (x != "erofa", locale.strxfrm(x)))),
              "link": os.environ["link"],
              "table": table_ordered,
            }
          ), file=f)
print_json(open("/tmp/lexique.json", "w"))
def print_html(f):
    for line in open("playground/csv-to-pdf.html").read().splitlines():
        if "MARKER" in line:
            count = 0
            for k in sorted(list(table.keys()), key=locale.strxfrm):
                count += 1
                # if count > 1000:
                #    break
                if (k == table[k]["new"]):
                    classes="row unchanged"
                else:
                    classes="row changed"
                if (table[k]["touched"]): # web browsers are unabled to print to pdf if we
                                          # include everything. Maybe try pandoc? typst?
                  print(f"<div class=\"{classes}\">", end="", file=f)
                  print("<span class=cell>", end="", file=f)
                  print(k, end="", file=f)
                  for old in table[k]["old"]:
                      print("<br><span class=alt>", end="", file=f)
                      print(old, end="", file=f)
                      print("</span>", end="", file=f)
                  print("</span>", end="", file=f)
                  print("<span class=cell>", end="", file=f)
                  print(table[k]["new"], end="", file=f)
                  print("</span>", end="", file=f)
                  print("</div>", file=f)
        else:
          print(line, file=f)
print_html(open("/tmp/lexique.html", "w"))
'
    cp playground/csv.typst /tmp
    typst c /tmp/csv.typst
    ;;
dict)
    compute_flags
    dict_gen gen "${rules_flags[@]}"
    ;;
word-list)
    cd $(jj workspace root)
    { sqlite3 <<EOF
.mode tabs
.import _build/default/data/lexique/Lexique383-full.gen.tsv t
.mode csv
select
  ortho
from (select distinct ortho, freqlemfilms2 from t
      where ortho = lemme
      and ((ortho like '%ll%' and phon like '%l%')
           or (ortho like '%aî%')
           or (ortho like '%ain%')
           or (ortho like '%amp%' or ortho like '%amb%' or ortho like '%amm%')
           or (ortho like '%ao%')
           or (ortho like '%août%')
           or (ortho like '%saoûl%')
           or (ortho like '%bb%')
           or (ortho like '%con%' and phon like '%k§%')
           or (ortho like '%cc%')
           or (ortho like '%ch%' and phon like '%k%')
           or (ortho like '%chs%')
           or (ortho like '%ck%')
           or (ortho like '%cq%')
           or (ortho like '%cz%')
           or (ortho like '%dd%')
           or (ortho like '%em%' and phon like '%am%')
           or (ortho like '%en%' and phon like '%an%')
           or (ortho like '%êi%')
           or (ortho like '%emp%' or ortho like '%emb%' or ortho like '%emm%')
           or (ortho like '%ey%')
           or (ortho like '%ff%')
           or (ortho like '%gg%')
           or (ortho like '%î%')
           or (ortho like '%ign%')
           or (ortho like '%imp%' or ortho like '%imb%' or ortho like '%imm%')
           or (ortho like '%nn%')
           or (ortho like '%mm%')
           or (ortho like '%oe%' or ortho like '%œ%')
           or (ortho like '%oî%')
           or (ortho like '%omp%' or ortho like '%omb%' or ortho like '%omm%')
           or (ortho like '%nn%')
           or (ortho like '%oo%')
           or (ortho like '%où%')
           or (ortho like '%aoû%')
           or (ortho like '%pp%')
           or (ortho like '%ph%')
           or (ortho like '%rh%')
           or (ortho like '%sc%')
           or (ortho like '%th%')
           or (ortho like '%tt%')
           or (ortho like '%w%' and phon like '%v%')
           or (ortho like '%xt%')
           or (ortho like '%y%')
           or (ortho like '%zz%'))
)
order by cast (freqlemfilms2 as real) desc, ortho
EOF
} | tr -d '"'
  ;;
*)
    echo >&2 "unknown option ${1-argv[1]}"
    exit 1
esac
