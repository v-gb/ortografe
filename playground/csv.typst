#set document(title: [Dictionnaire de transcription])
#set text(hyphenate: true) // avoid overflowing for anticonstitutionnellement


#{
if false {
    align(center + horizon, text(17pt)[
    *Dictionnaire de transcription pour #text(style: "italic")[La réforme de l'orthographe lexicale du français] de Claude Gruaz*
])
}
}

#set page(
    footer: context [
    #set align(center)
    #set text(12pt)
    #counter(page).display("1")
  ])
#counter(page).update(12)
#set page(columns: 2)
#let user_facing_link(url, text) = {
    link(url)[#underline(offset: 2pt, stroke: (thickness: 1pt, dash: "densely-dotted"), text)]
}

#{
    let json = json("lexique.json")
    let content = ();
    let row = 0
    if false {
        place(
            top + center,
            float: true,
            scope: "parent",
            text(14pt, weight:"bold", link(json.link)[LE DICTIONNAIRE #linebreak() #linebreak()])
        )
    }
    if false {
    place(
        top + left,
        float: true,
        scope: "parent",
        {
            [ Ce dictionnaire est bâti à partir des règles suivantes, appliquées à #{calc.quo(json.count,1000)}k mots du #user_facing_link("http://lexique.org", [lexique lexique.org]) :]
            let items = ();
            for r in json.rules {
                if r != "oe" and r != "1990" {
                    items.push(r)
                }
            }
            list(indent: 0.5cm, ..items)

            [ Des #user_facing_link(json.link, [outils en ligne]) permettent également d'utiliser ces
              règles pour transcrire des textes entiers. ]

            [ La colonne de gauche indique l'orthographe actuelle, puis le cas échéant,
              d'autres orthographes existantes (par exemple, une orthographe prédatant
              la réforme de 1990). Les mots changés par les règles sont colorés, les mots
              inchangés sont laissés sur fond blanc. ]
        })
    }

    let style = 5 // 0: color
                  // 1: bold
                  // 2: "-" for unchanged words
                  // 3: "-" for unchanged words, and line separators
                  // 4: "-" for unchanged words, alternating bold
                  // 5: greyscale
                  // 6: "-" for unchanged words, and dots to line up rows
                  // 7: "" for unchanged words,  and dots to line up changed rows
    let hline = table.hline(stroke: (thickness: 0.00001pt, paint: luma(180)))
    if style == 3 { content.push(hline) }
    for (k, v) in json.table {
        let color1 = if style == 5 { luma(180) } else { rgb("dff2ff") }
        let color2 = if style == 5 { luma(180) } else { rgb("a3d5ff") }
        let color = if k == v.new or style != 0 and style != 5 { white } else if calc.odd(row) { color1 } else { color2 }
        let weight = {
            if style == 4 {
                if calc.odd(row) { "regular" } else { "semibold" }
            }
            else {
                if k == v.new or style != 1 { "regular" }
                else if calc.odd(row) { "bold" } else { "extrabold" }
            }
        }
        let left_bit = if style == 6 or (style == 7 and k != v.new) { [#k #box(width: 1fr, line(stroke: (dash: "loosely-dotted"), length:100%, start:(0% + 5pt, 0% - 2pt)))] } else { [ #text(weight: weight)[#k] ] }
        for old in v.old {
            left_bit = left_bit + [ \ #h(0.3cm) #text(0.9em, weight: weight)[#old] ]
        }
        content.push(table.cell(fill: color, left_bit))
        let new = if k == v.new and (style == 2 or style == 3 or style == 4 or style == 6 or style == 7) { if style == 6 or style == 7 { "" } else { "-" } } else { v.new }
        content.push(table.cell(fill: color, text(weight: weight)[#new]))
        if style == 3 { content.push(hline) }
        row += 1
    }
    table(columns: 2, stroke:none, ..content)
}
